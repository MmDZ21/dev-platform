// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ───── Enums ───── */
enum Role {
  admin
  user
}

/* ───── Core Auth ───── */
model User {
  id             String   @id @default(cuid())
  email          String   @unique
  hashedPassword String?
  username       String?  @unique
  role           Role     @default(admin)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions Session[]
  books    Book[]
  posts    Post[]
  products Product[]
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

/* ───── Demo Book ───── */
model Book {
  id        String  @id @default(cuid())
  title     String
  author    String
  description String?
  price     Float?
  imageUrl  String?
  published Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String?
  user   User? @relation(fields: [userId], references: [id])
}

/* ───── Blog ───── */
model Category {
  id   String @id @default(uuid())
  name String @unique
  slug String @unique @db.VarChar(256)

  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id      String  @id @default(uuid())
  name    String  @unique
  slug    String  @unique

  posts    Post[]    @relation("PostTags")
  products Product[] @relation("ProductTags")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        String  @id @default(cuid())
  title     String
  slug      String  @unique @db.VarChar(256)
  summary   String?
  draft     Boolean @default(false)
  content   String?
  published Boolean @default(false)
  imageUrl  String?

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  tags Tag[] @relation("PostTags")

  metaTitle       String?
  metaDescription String?
  canonicalUrl    String?
  ogImage         String?

  userId   String?
  user     User? @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/* ───── Product Catalog ───── */
model ProductCategory {
  id       String  @id @default(uuid())
  name     String
  slug     String  @unique @db.VarChar(256)

  parentId String?
  parent   ProductCategory?  @relation("Subcategories", fields: [parentId], references: [id], onDelete: Cascade)
  children ProductCategory[] @relation("Subcategories")

  products Product[]

  summary         String?
  description     String?
  image           String?
  order           Int?
  metaTitle       String?
  metaDescription String?
  ogImage         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([parentId])
  @@index([order])
}

model Product {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique @db.VarChar(256)
  summary     String?
  description String?
  imageUrls   String[]
  datasheetUrl String?

  categoryId String
  category   ProductCategory @relation(fields: [categoryId], references: [id], onDelete: Restrict)

  tags Tag[] @relation("ProductTags")

  isPublished Boolean @default(true)
  order       Int?

  userId String      // ← اجباری چون همیشه از سشن می‌آید
  user   User @relation(fields: [userId], references: [id])

  metaTitle       String?
  metaDescription String?
  canonicalUrl    String?
  ogImage         String?
  ogTitle         String?
  ogDescription   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@index([userId])
  @@index([order])
}
